// --------------------------------------------------------------------------------------------------
// This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
// Version 1.3.6.20110331_01     
// 12-2-1 ÏÂÎç4:09    
// ${CustomMessageForDisclaimer}                                                                             
// --------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.SqlTypes;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace COM.MeshStudio.Lib.Rule
{
	public class RuleSVOExplainer {
		private String RuleSVOInstanceFile;
		private Object ruleSubjectObj, ruleVerbObj, ruleObjectObj, ruleResultObj;
		private List<SVOClause> svoClauseList;
		private List<Object> parameterObjectSubList;
		private List<Object[]> methodParametersSubList;
		private List<Object> parameterObjectVerList;
		private List<Object[]> methodParametersVerList;
		private List<Object> parameterObjectObjList;
		private List<Object[]> methodParametersObjList;
	
		public RuleSVOExplainer() {
			RuleSVOInstanceFile = "";
			svoClauseList = new List<SVOClause>();
		}
	
        //public void InitRuleSVO() {
        //    InitRuleSVO(RuleSVOInstanceFile);
        //}
	
        //public void InitRuleSVO(String xmlFile) {
        //    XMLOperatorRule xmlOpr = new XMLOperatorRule();
        //    svoClauseList = new List<SVOClause>();
        //    try {
        //        xmlOpr.ReadXML(xmlFile, svoClauseList);
	
        //    } catch (Exception e) {
        //        // TODO Auto-generated catch block
        //        Console.Error.WriteLine(e.StackTrace);
        //    }
        //}
	
        //public void InitRuleSVO(String xmlFile, String svoClauseID) {
        //    XMLOperatorRule xmlOpr = new XMLOperatorRule();
        //    try {
        //        ILOG.J2CsMapping.Collections.Collections.Add(svoClauseList,xmlOpr.ReadSVOClauseByID(xmlFile, svoClauseID));
	
        //    } catch (Exception e) {
        //        // TODO Auto-generated catch block
        //        Console.Error.WriteLine(e.StackTrace);
        //    }
        //}
	
        //public void InitRuleSVO(String xmlFile, List<String> svoClauseIDList) {
        //    svoClauseList = new List<SVOClause>();
        //    for (int i = 0; i < svoClauseIDList.Count; i++) {
        //        InitRuleSVO(xmlFile, svoClauseIDList[i]);
        //    }
        //}
	
		private SVOClause FindSubSVOClause(String name) {
			SVOClause result = null;
			for (int i = 0; i < svoClauseList.Count; i++) {
				SVOClause currSVO = svoClauseList[i];
				if (currSVO.isSubClause) {
					if (currSVO.name.Equals(name)) {
						result = currSVO;
					}
				}
			}
			return result;
		}
	
		private Object[] FindSubSVOClauseParas(String name) {
			Object[] result = new Object[6];
			for (int i = 0; i < svoClauseList.Count; i++) {
				SVOClause currSVO = svoClauseList[i];
				if (currSVO.isSubClause) {
					if (currSVO.name.Equals(name)) {
						result[0] = parameterObjectSubList[i];
						result[1] = methodParametersSubList[i];
						result[2] = parameterObjectVerList[i];
						result[3] = methodParametersVerList[i];
						result[4] = parameterObjectObjList[i];
						result[5] = methodParametersObjList[i];
					}
				}
			}
			return result;
		}
	
		public void ExplainAllRuleSVO(List<Object> parameterObjectSubList_0,
				List<Object[]> methodParametersSubList_1,
				List<Object> parameterObjectVerList_2,
				List<Object[]> methodParametersVerList_3,
				List<Object> parameterObjectObjList_4,
				List<Object[]> methodParametersObjList_5) {
			this.parameterObjectSubList = parameterObjectSubList_0;
			this.methodParametersSubList = methodParametersSubList_1;
			this.parameterObjectVerList = parameterObjectVerList_2;
			this.methodParametersVerList = methodParametersVerList_3;
			this.parameterObjectObjList = parameterObjectObjList_4;
			this.methodParametersObjList = methodParametersObjList_5;
			for (int i = 0; i < svoClauseList.Count; i++) {
				if (!svoClauseList[i].isSubClause) {
					ExplainRuleSVO(svoClauseList[i],
							parameterObjectObjList_4[i],
							methodParametersSubList_1[i],
							parameterObjectVerList_2[i],
							methodParametersVerList_3[i],
							parameterObjectObjList_4[i],
							methodParametersObjList_5[i]);
				}
			}
		}
	
		public void ExplainRuleSVO(SVOClause svoClause, Object parameterObjectSub,
				Object[] methodParametersSub, Object parameterObjectVer,
				Object[] methodParametersVer, Object parameterObjectObj,
				Object[] methodParametersObj) {
			ExplainRuleSVOSubject(svoClause, parameterObjectSub,
					methodParametersSub);
			ExplainRuleSVOObject(svoClause, parameterObjectObj, methodParametersObj);
			ExplainRuleSVOVerb(svoClause, parameterObjectVer, methodParametersVer);
			svoClause.ruleResultObj = ruleResultObj;
		}
	
		private Object GetRuleSVOPartValue_OBJECT(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			if (ps.Count > 0) {
				try {
					Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(ps[0]);
					result = c.Cast(parameterObject);
				} catch (TypeLoadException e) {
					// TODO Auto-generated catch block
					Console.Error.WriteLine(e.StackTrace);
				}
			} else {
				result = parameterObject;
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_OBJECT_FIELD(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			String className = ps[0];
			String fieldName = ps[1];
			result = GetParameterClassFieldValue(className, fieldName,
					parameterObject);
			return result;
		}
	
		private Object GetRuleSVOPartValue_OBJECT_METHOD(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			String className = ps[0];
			String methodName = ps[1];
			methodParameters = new Object[(ps.Count - 2) / 3];
			String[] methodParaClassName = new String[(ps.Count - 2) / 3];
			for (int i = 2; i < ps.Count; i += 3) {
				String paraClassName = ps[i];
				String methodParaClass = ps[i + 1];
				String paraValueStr = ps[i + 2];
				try {
					if (paraClassName.ToLower().Equals("null")) {
						methodParameters = null;
					} else {
						Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName);
						methodParameters[(i - 2) / 3] = c.Cast(paraValueStr);
						methodParaClassName[(i - 2) / 3] = methodParaClass;
					}
				} catch (TypeLoadException e) {
					// TODO Auto-generated catch block
					Console.Error.WriteLine(e.StackTrace);
				}
			}
			result = RunParameterClassMethod(className, methodName,
					parameterObject, methodParameters, methodParaClassName);
			return result;
		}
	
		private Object GetRuleSVOPartValue_OBJECT_METHOD_LIST(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			String className = ps[0];
			for (int i = 1; i < ps.Count; i += 3) {
				String methodName = ps[i];
				methodParameters = new Object[1];
				String paraClassName = ps[i + 1];
				String paraValueStr = ps[i + 2];
				String[] methodParaClassName = new String[1];
				try {
					if (paraClassName.ToLower().Equals("null")) {
						methodParameters = null;
						methodParaClassName = null;
					} else {
						Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName);
						methodParameters[0] = c.Cast(paraValueStr);
						methodParaClassName[0] = paraClassName;
					}
				} catch (TypeLoadException e) {
					// TODO Auto-generated catch block
					Console.Error.WriteLine(e.StackTrace);
				}
				result = RunParameterClassMethod(className, methodName,
						parameterObject, methodParameters, methodParaClassName);
				className = result.GetType().FullName;
				parameterObject = result;
			}
			return result;
		}
	
		private int GetParaIndexFromName(String paraName) {
			int result = 0;
			if (paraName.ToLower().Equals("contentamilist")) {
				result = 1;
			} else if (paraName.ToLower().Equals("machinelist")) {
				result = 2;
			} else if (paraName.ToLower().Equals("content2aimrelation")) {
				result = 3;
			} else if (paraName.ToLower().Equals("contentplanmodelList")) {
				result = 4;
			} else if (paraName.ToLower().Equals("districtmodellist")) {
				result = 5;
			} else if (paraName.ToLower().Equals("storemodellist")) {
				result = 6;
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_OBJECT_FIELD_PARA(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			String className = ps[0];
			String fieldName = ps[1];
			String paraName = ps[2];
			/* @SuppressWarnings("unchecked")*/
			Object parameterObjectNew = ((List<Object>) parameterObject)[GetParaIndexFromName(paraName)];
			result = GetParameterClassFieldValue(className, fieldName,
					parameterObjectNew);
			return result;
		}
	
		private Object GetRuleSVOPartValue_OBJECT_METHOD_PARA(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			String className = ps[0];
			String methodName = ps[1];
			String paraName = ps[2];
			/* @SuppressWarnings("unchecked")*/
			Object parameterObjectNew = ((List<Object>) parameterObject)[GetParaIndexFromName(paraName)];
			methodParameters = new Object[(ps.Count - 3) / 3];
			String[] methodParaClassName = new String[(ps.Count - 3) / 3];
			for (int i = 3; i < ps.Count; i += 3) {
				String paraClassName = ps[i];
				String methodParaClass = ps[i + 1];
				String paraValueStr = ps[i + 2];
				try {
					if (paraClassName.ToLower().Equals("null")) {
						methodParameters = null;
					} else {
						Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName);
						methodParameters[(i - 3) / 3] = c.Cast(paraValueStr);
						methodParaClassName[(i - 3) / 3] = methodParaClass;
					}
				} catch (TypeLoadException e) {
					// TODO Auto-generated catch block
					Console.Error.WriteLine(e.StackTrace);
				}
			}
			result = RunParameterClassMethod(className, methodName,
					parameterObjectNew, methodParameters, methodParaClassName);
			return result;
		}
	
		private Object GetRuleSVOPartValue_OBJECT_METHOD_LIST_PARA(
				List<String> ps, Object parameterObject,
				Object[] methodParameters) {
			Object result = null;
			String className = ps[0];
			String paraName = ps[1];
			/* @SuppressWarnings("unchecked")*/
			Object parameterObjectNew = ((List<Object>) parameterObject)[GetParaIndexFromName(paraName)];
			for (int i = 2; i < ps.Count; i += 3) {
				String methodName = ps[i];
				methodParameters = new Object[1];
				String paraClassName = ps[i + 1];
				String paraValueStr = ps[i + 2];
				String[] methodParaClassName = new String[1];
				try {
					if (paraClassName.ToLower().Equals("null")) {
						methodParameters = null;
						methodParaClassName = null;
					} else {
						Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName);
						methodParameters[0] = c.Cast(paraValueStr);
						methodParaClassName[0] = paraClassName;
					}
				} catch (TypeLoadException e) {
					// TODO Auto-generated catch block
					Console.Error.WriteLine(e.StackTrace);
				}
				result = RunParameterClassMethod(className, methodName,
						parameterObjectNew, methodParameters, methodParaClassName);
				className = result.GetType().FullName;
				parameterObjectNew = result;
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_INTERN(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			String typeName = ps[0];
			if (typeName.ToUpper().Equals("DOUBLE")) {
				double lb = (((Double )Double.Parse(ps[1],ILOG.J2CsMapping.Util.NumberFormatProvider.NumberFormat)));
				double ub = (((Double )Double.Parse(ps[2],ILOG.J2CsMapping.Util.NumberFormatProvider.NumberFormat)));
				double internLB = Math.Max(lb,ub);
				double internUB = Math.Min(lb,ub);
				result = new double[] { internLB, internUB };
			} else if (typeName.ToUpper().Equals("INT")) {
				int lb_0 = (((Int32 )Int32.Parse(ps[1])));
				int ub_1 = (((Int32 )Int32.Parse(ps[2])));
				int internLB_2 = Math.Max(lb_0,ub_1);
				int internUB_3 = Math.Min(lb_0,ub_1);
				result = new int[internUB_3 - internLB_2 + 1];
				for (int i = internLB_2; i <= internUB_3; i++) {
					((int[]) result)[i - internLB_2] = i;
				}
			} else if (typeName.ToUpper().Equals("TIME")) {
				SqlDateTime lb_4 = System.Data.SqlTypes.SqlDateTime.ValueOf(ps[1]);
				SqlDateTime ub_5 = System.Data.SqlTypes.SqlDateTime.ValueOf(ps[2]);
				if (!lb_4.Before(ub_5)) {
					SqlDateTime temp = lb_4;
					lb_4 = ub_5;
					ub_5 = temp;
				}
				result = new SqlDateTime[] { lb_4, ub_5 };
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_DATE(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			try {
				DateFormat format = new SimpleDateFormat(ps[0]);
				result = format.Parse(ps[1]);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_WEEKDAY(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			DateFormatSymbols dfs = new DateFormatSymbols();
			String[] weekdays = dfs.GetWeekdays();
			try {
				DateFormat format = new SimpleDateFormat(ps[0]);
				DateTime date = format.Parse(ps[1]);
				GregorianCalendar gc = new GregorianCalendar(date.Year,
						date.Month, date.Day);
				result = weekdays[gc.Get(ILOG.J2CsMapping.Util.Calendar.DAY_OF_WEEK)];
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_TIME(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = System.Data.SqlTypes.SqlDateTime.ValueOf(ps[0]);
			return result;
		}
	
		private Object GetRuleSVOPartValue_LIST(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			if (ps.Count > 0) {
				try {
					Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(ps[0]);
					List<Object> list = new List<Object>();
					for (int i = 1; i < ps.Count; i++) {
						ILOG.J2CsMapping.Collections.Collections.Add(list,c.Cast(ps[i]));
					}
					result = list;
				} catch (TypeLoadException e) {
					// TODO Auto-generated catch block
					Console.Error.WriteLine(e.StackTrace);
				}
			} else {
				result = parameterObject;
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_CONSTRUCT_LIST(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			List<Object> result = null;
			String classString = ps[0];
			String methodString = ps[1];
			result = new List<Object>();
			/* @SuppressWarnings("unchecked")*/
			List<Object> list = (List<Object>) parameterObject;
			for (int i = 0; i < list.Count; i++) {
				Object oo = list[i];
				ILOG.J2CsMapping.Collections.Collections.Add(result,RunParameterClassMethod(classString, methodString, oo,
									methodParameters));
	
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_RULE_PART(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			// TODO
			String subSVOClauseName = ps[0];
			SVOClause svoClause = FindSubSVOClause(subSVOClauseName);
			Object[] fMethodParameters = FindSubSVOClauseParas(subSVOClauseName);
			RuleSVOExplainer explainer = new RuleSVOExplainer();
			explainer.ExplainRuleSVO(svoClause, (Object) fMethodParameters[0],
					(Object[]) fMethodParameters[1], (Object) fMethodParameters[2],
					(Object[]) fMethodParameters[3], (Object) fMethodParameters[4],
					(Object[]) fMethodParameters[5]);
			result = svoClause.ruleResultObj;
			return result;
		}
	
		private Object GetRuleSVOPartValue_EXPRESSION(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			String expressionString = ps[0];
			RuleExpressionExplainer ee = new RuleExpressionExplainer();
			ee.Explain(expressionString);
			for (int i = 1; i < ps.Count; i++) {
				String variableDefinition = ps[i];
				String[] vds = ILOG.J2CsMapping.Text.RegExUtil.Split(variableDefinition, ";");
				if (vds.Length == 1) {
					if (vds[0].ToUpper().Equals("VALUE")) {
						result = ee.GetExpressionValue();
					} else if (vds[0].ToUpper().Equals("NONE")) {
						result = ee;
					}
				} else {
					String variableName = vds[0];
					String variableType = vds[1];
					if (variableType.ToUpper().Equals("VALUE")) {
						String variableValueString = vds[2];
						try {
							double variableValue = (((Double )Double.Parse(variableValueString,ILOG.J2CsMapping.Util.NumberFormatProvider.NumberFormat)));
							ee.SetVariable(variableName, variableValue);
						} catch (Exception e) {
							// TODO Auto-generated catch block
							Console.Error.WriteLine(e.StackTrace);
						}
					} else if (variableType.ToUpper().Equals("Expression")) {
						String variableExpressionString = vds[2];
						RuleExpressionExplainer eev = new RuleExpressionExplainer();
						eev.Explain(variableExpressionString);
						double variableValue_0 = eev.GetExpressionValue();
						ee.SetVariable(variableName, variableValue_0);
					} else if (variableType.ToUpper().Equals("OBJECT_FIELD")) {
						String variableClassName = vds[2];
						String variableClassField = vds[3];
						try {
							double variableValue_1 = ((Double)GetParameterClassFieldValue(variableClassName,variableClassField,parameterObject));
							ee.SetVariable(variableName, variableValue_1);
						} catch (Exception e_2) {
							// TODO Auto-generated catch block
							Console.Error.WriteLine(e_2.StackTrace);
						}
					} else if (variableType.ToUpper().Equals("OBJECT_METHOD")) {
						String variableClassName_3 = vds[2];
						String variableClassMethod = vds[3];
						try {
							double variableValue_4 = ((Double)RunParameterClassMethod(variableClassName_3,variableClassMethod,parameterObject,methodParameters));
							ee.SetVariable(variableName, variableValue_4);
						} catch (Exception e_5) {
							// TODO Auto-generated catch block
							Console.Error.WriteLine(e_5.StackTrace);
						}
					}
					result = ee.GetExpressionValue();
				}
			}
			return result;
		}
	
		private Object GetRuleSVOPartValue_VARIABLE_LIST(List<String> ps,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			RuleExpressionExplainer ee = new RuleExpressionExplainer();
			for (int i = 0; i < ps.Count; i++) {
				String variableDefinition = ps[i];
				String[] vds = ILOG.J2CsMapping.Text.RegExUtil.Split(variableDefinition, ";");
				String variableName = vds[0];
				String variableType = vds[1];
				if (variableType.ToUpper().Equals("VALUE")) {
					String variableValueString = vds[2];
					try {
						double variableValue = (((Double )Double.Parse(variableValueString,ILOG.J2CsMapping.Util.NumberFormatProvider.NumberFormat)));
						ee.SetVariable(variableName, variableValue);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						Console.Error.WriteLine(e.StackTrace);
					}
				} else if (variableType.ToUpper().Equals("Expression")) {
					String variableExpressionString = vds[2];
					RuleExpressionExplainer eev = new RuleExpressionExplainer();
					eev.Explain(variableExpressionString);
					double variableValue_0 = eev.GetExpressionValue();
					ee.SetVariable(variableName, variableValue_0);
				} else if (variableType.ToUpper().Equals("OBJECT_FIELD")) {
					String variableClassName = vds[2];
					String variableClassField = vds[3];
					try {
						double variableValue_1 = ((Double)GetParameterClassFieldValue(variableClassName,variableClassField,parameterObject));
						ee.SetVariable(variableName, variableValue_1);
					} catch (Exception e_2) {
						// TODO Auto-generated catch block
						Console.Error.WriteLine(e_2.StackTrace);
					}
				} else if (variableType.ToUpper().Equals("OBJECT_METHOD")) {
					String variableClassName_3 = vds[2];
					String variableClassMethod = vds[3];
					try {
						double variableValue_4 = ((Double)RunParameterClassMethod(variableClassName_3,variableClassMethod,parameterObject,methodParameters));
						ee.SetVariable(variableName, variableValue_4);
					} catch (Exception e_5) {
						// TODO Auto-generated catch block
						Console.Error.WriteLine(e_5.StackTrace);
					}
				}
			}
			result = ee.GetVariableList();
			return result;
		}
	
		private void ExplainRuleSVOSubject(SVOClause svoClause,
				Object parameterObject, Object[] methodParameters) {
			try {
				if (svoClause.ruleSubject == RuleEnum.RuleSubjects.VALUE) {
					ruleSubjectObj = parameterObject;
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.OBJECT) {
					ruleSubjectObj = GetRuleSVOPartValue_OBJECT(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.OBJECT_FIELD) {
					ruleSubjectObj = GetRuleSVOPartValue_OBJECT_FIELD(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.OBJECT_METHOD) {
					ruleSubjectObj = GetRuleSVOPartValue_OBJECT_METHOD(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.OBJECT_METHOD_LIST) {
					ruleSubjectObj = GetRuleSVOPartValue_OBJECT_METHOD_LIST(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.OBJECT_FIELD_PARA) {
					ruleSubjectObj = GetRuleSVOPartValue_OBJECT_FIELD_PARA(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.OBJECT_METHOD_PARA) {
					ruleSubjectObj = GetRuleSVOPartValue_OBJECT_METHOD_PARA(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.OBJECT_METHOD_LIST_PARA) {
					ruleSubjectObj = GetRuleSVOPartValue_OBJECT_METHOD_LIST_PARA(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.EXPRESSION) {
					ruleSubjectObj = GetRuleSVOPartValue_EXPRESSION(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.INTERN) {
					ruleSubjectObj = GetRuleSVOPartValue_INTERN(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.DATE) {
					ruleSubjectObj = GetRuleSVOPartValue_DATE(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.WEEKDAY) {
					ruleSubjectObj = GetRuleSVOPartValue_WEEKDAY(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.TIME) {
					ruleSubjectObj = GetRuleSVOPartValue_TIME(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.LIST) {
					ruleSubjectObj = GetRuleSVOPartValue_LIST(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.CONSTRUCT_LIST) {
					ruleSubjectObj = GetRuleSVOPartValue_CONSTRUCT_LIST(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleSubject == RuleEnum.RuleSubjects.RULE_PART) {
					ruleSubjectObj = GetRuleSVOPartValue_RULE_PART(
							svoClause.ruleSubjectParameter, parameterObject,
							methodParameters);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
		}
	
		private void ExplainRuleSVOObject(SVOClause svoClause,
				Object parameterObject, Object[] methodParameters) {
			try {
				if (svoClause.ruleObject == RuleEnum.RuleObjects.VALUE) {
					ruleObjectObj = parameterObject;
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.OBJECT) {
					ruleObjectObj = GetRuleSVOPartValue_OBJECT(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.OBJECT_FIELD) {
					ruleObjectObj = GetRuleSVOPartValue_OBJECT_FIELD(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.OBJECT_METHOD) {
					ruleObjectObj = GetRuleSVOPartValue_OBJECT_METHOD(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.OBJECT_METHOD_LIST) {
					ruleObjectObj = GetRuleSVOPartValue_OBJECT_METHOD_LIST(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.OBJECT_FIELD_PARA) {
					ruleObjectObj = GetRuleSVOPartValue_OBJECT_FIELD_PARA(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.OBJECT_METHOD_PARA) {
					ruleObjectObj = GetRuleSVOPartValue_OBJECT_METHOD_PARA(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.OBJECT_METHOD_LIST_PARA) {
					ruleObjectObj = GetRuleSVOPartValue_OBJECT_METHOD_LIST_PARA(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.EXPRESSION) {
					ruleObjectObj = GetRuleSVOPartValue_EXPRESSION(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.VARIABLE_LIST) {
					ruleObjectObj = GetRuleSVOPartValue_VARIABLE_LIST(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.INTERN) {
					ruleObjectObj = GetRuleSVOPartValue_INTERN(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.DATE) {
					ruleObjectObj = GetRuleSVOPartValue_DATE(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.WEEKDAY) {
					ruleObjectObj = GetRuleSVOPartValue_WEEKDAY(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.TIME) {
					ruleObjectObj = GetRuleSVOPartValue_TIME(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.LIST) {
					ruleObjectObj = GetRuleSVOPartValue_LIST(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.CONSTRUCT_LIST) {
					ruleObjectObj = GetRuleSVOPartValue_CONSTRUCT_LIST(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				} else if (svoClause.ruleObject == RuleEnum.RuleObjects.RULE_PART) {
					ruleObjectObj = GetRuleSVOPartValue_RULE_PART(
							svoClause.ruleObjectParameter, parameterObject,
							methodParameters);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
		}
	
		/* @SuppressWarnings("unchecked")*/
		private void ExplainRuleSVOVerbWholeMode(SVOClause svoClause,
				Object parameterObject, Object[] methodParameters) {
			try {
				if (svoClause.ruleVerb == RuleEnum.RuleVerbs.EQUALS) {
					String typeString = svoClause.ruleVerbParameter[0];
					if (typeString.ToUpper().Equals("STRING")) {
						ruleResultObj = (ruleSubjectObj.ToString()
								.Equals(ruleObjectObj.ToString()));
					} else if (typeString.ToUpper().Equals("STRINGUPPER")) {
						ruleResultObj = (ruleSubjectObj.ToString().ToUpper()
								.Equals(ruleObjectObj.ToString().ToUpper()));
					} else if (typeString.ToUpper().Equals("STRINGLOWER")) {
						ruleResultObj = (ruleSubjectObj.ToString().ToLower()
								.Equals(ruleObjectObj.ToString().ToLower()));
					} else if (typeString.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = ((Double) (ruleSubjectObj)) == ((Double) (ruleObjectObj));
					} else if (typeString.ToUpper().Equals("BOOLEAN")) {
						ruleResultObj = ((Boolean) (ruleSubjectObj)) == ((Boolean) (ruleObjectObj));
					} else {
						ruleResultObj = ruleSubjectObj.Equals(ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.LARGER_THAN) {
					String typeString_0 = svoClause.ruleVerbParameter[0];
					if (typeString_0.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = (Double) (ruleSubjectObj) > (Double) (ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.LESS_THAN) {
					String typeString_1 = svoClause.ruleVerbParameter[0];
					if (typeString_1.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = (Double) (ruleSubjectObj) < (Double) (ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.NOT_LESS_THAN) {
					String typeString_2 = svoClause.ruleVerbParameter[0];
					if (typeString_2.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = (Double) (ruleSubjectObj) >= (Double) (ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.NOT_LARGER_THAN) {
					String typeString_3 = svoClause.ruleVerbParameter[0];
					if (typeString_3.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = (Double) (ruleSubjectObj) <= (Double) (ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.NOT_EQUALS) {
					String typeString_4 = svoClause.ruleVerbParameter[0];
					if (typeString_4.ToUpper().Equals("STRING")) {
						ruleResultObj = (ruleSubjectObj.ToString()
								.Equals(ruleObjectObj.ToString()));
					} else if (typeString_4.ToUpper().Equals("STRINGUPPER")) {
						ruleResultObj = (ruleSubjectObj.ToString().ToUpper()
								.Equals(ruleObjectObj.ToString().ToUpper()));
					} else if (typeString_4.ToUpper().Equals("STRINGLOWER")) {
						ruleResultObj = (ruleSubjectObj.ToString().ToLower()
								.Equals(ruleObjectObj.ToString().ToLower()));
					} else if (typeString_4.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = !((Double) (ruleSubjectObj))
								.Equals((Double) (ruleObjectObj));
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.EXPRESSION_VALUE) {
					ruleResultObj = (Double) ((RuleExpressionExplainer) ruleSubjectObj)
							.GetExpressionValue((List<ExpressionVariable>) ruleObjectObj);
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.SET) {
					String paraString = svoClause.ruleVerbParameter[0];
					if (paraString.ToUpper().Equals("SELF")) {
						ruleResultObj = ruleObjectObj;
					} else if (paraString.ToUpper().Equals("FIELD")) {
						String fieldString = svoClause.ruleVerbParameter[1];
						ruleResultObj = ruleSubjectObj;
						Type c = ruleSubjectObj.GetType();
						FieldInfo f = c.GetField(fieldString);
						f.SetValue(ruleResultObj, ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.CALL) {
					String paraString_5 = svoClause.ruleVerbParameter[0];
					if (paraString_5.ToUpper().Equals("METHOD_VOID")) {
						String methodString = svoClause.ruleVerbParameter[1];
						Type c_6 = ruleSubjectObj.GetType();
						MethodInfo m = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c_6,methodString);
						ruleResultObj = ILOG.J2CsMapping.Reflect.Helper.Invoke(m,ruleSubjectObj,new Object[0]);
					} else if (paraString_5.ToUpper().Equals("METHOD_OBJ")) {
						String methodString_7 = svoClause.ruleVerbParameter[1];
						Type c_8 = ruleSubjectObj.GetType();
						MethodInfo m_9 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c_8,methodString_7);
						ruleResultObj = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_9,ruleSubjectObj,new Object[] { ruleObjectObj });
					} else if (paraString_5.ToUpper().Equals("METHOD_PARA_OBJ")) {
						String methodString_10 = svoClause.ruleVerbParameter[1];
						Type c_11 = ruleSubjectObj.GetType();
						MethodInfo m_12 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c_11,methodString_10);
						ruleResultObj = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_12,ruleSubjectObj,new Object[] { parameterObject });
					} else if (paraString_5.ToUpper()
							.Equals("METHOD_PARA_METHOD")) {
						String methodString_13 = svoClause.ruleVerbParameter[1];
						Type c_14 = ruleSubjectObj.GetType();
						MethodInfo m_15 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c_14,methodString_13);
						ruleResultObj = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_15,ruleSubjectObj,methodParameters);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.AND) {
					String paraString_16 = svoClause.ruleVerbParameter[0];
					if (paraString_16.ToUpper().Equals("LOGICAL")) {
						ruleResultObj = (Boolean) ruleSubjectObj
								& (Boolean) ruleObjectObj;
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.OR) {
					String paraString_17 = svoClause.ruleVerbParameter[0];
					if (paraString_17.ToUpper().Equals("LOGICAL")) {
						ruleResultObj = (Boolean) ruleSubjectObj
								| (Boolean) ruleObjectObj;
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.NOT) {
					String paraString_18 = svoClause.ruleVerbParameter[0];
					if (paraString_18.ToUpper().Equals("LOGICAL")) {
						ruleResultObj = !(bool)(((Boolean)ruleSubjectObj));
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.EARLY_THAN) {
					String paraString_19 = svoClause.ruleVerbParameter[0];
					if (paraString_19.ToUpper().Equals("TIME")) {
						ruleResultObj = ILOG.J2CsMapping.Util.DateUtil.Before(((DateTime) ruleSubjectObj),(DateTime) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.LATER_THAN) {
					String paraString_20 = svoClause.ruleVerbParameter[0];
					if (paraString_20.ToUpper().Equals("TIME")) {
						ruleResultObj = ILOG.J2CsMapping.Util.DateUtil.After(((DateTime) ruleSubjectObj),(DateTime) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.BETWEEN) {
					String paraString_21 = svoClause.ruleVerbParameter[0];
					if (paraString_21.ToUpper().Equals("TIME")) {
						SqlDateTime[] timeRange = (SqlDateTime[]) ruleObjectObj;
						ruleResultObj = ILOG.J2CsMapping.Util.DateUtil.After(((DateTime) ruleSubjectObj),timeRange[0])
								& ILOG.J2CsMapping.Util.DateUtil.Before(((DateTime) ruleSubjectObj),timeRange[1]);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.BELONG) {
					String paraString_22 = svoClause.ruleVerbParameter[0];
					if (paraString_22.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleObjectObj)
								.Contains(ruleSubjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.HAVING) {
					String paraString_23 = svoClause.ruleVerbParameter[0];
					if (paraString_23.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleSubjectObj)
								.Contains(ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.INSIDE) {
					String paraString_24 = svoClause.ruleVerbParameter[0];
					if (paraString_24.ToUpper().Equals("SET")) {
						ruleResultObj = IsInside(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.OUTSIDE) {
					String paraString_25 = svoClause.ruleVerbParameter[0];
					if (paraString_25.ToUpper().Equals("SET")) {
						ruleResultObj = IsOutside(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.OVERLAP) {
					String paraString_26 = svoClause.ruleVerbParameter[0];
					if (paraString_26.ToUpper().Equals("SET")) {
						ruleResultObj = IsOverlap(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.APPEND) {
					String paraString_27 = svoClause.ruleVerbParameter[0];
					if (paraString_27.ToUpper().Equals("SET")) {
						ruleResultObj = ILOG.J2CsMapping.Collections.Collections.Add(((List<Object>) ruleSubjectObj),ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.DELETE) {
					String paraString_28 = svoClause.ruleVerbParameter[0];
					if (paraString_28.ToUpper().Equals("SET")) {
						ruleResultObj = ILOG.J2CsMapping.Collections.Collections.Remove(((List<Object>) ruleSubjectObj),ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.MERGE) {
					String paraString_29 = svoClause.ruleVerbParameter[0];
					if (paraString_29.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleSubjectObj)
								.AddRange((List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.EXCLUDE) {
					String paraString_30 = svoClause.ruleVerbParameter[0];
					if (paraString_30.ToUpper().Equals("SET")) {
						ruleResultObj = ILOG.J2CsMapping.Collections.Collections.RemoveAll(((List<Object>) ruleSubjectObj),(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.UNION) {
					String paraString_31 = svoClause.ruleVerbParameter[0];
					if (paraString_31.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleSubjectObj)
								.AddRange((List<Object>) ruleObjectObj);
						ruleResultObj = DoDistinct((List<Object>) ruleResultObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.INTERSECTION) {
					String paraString_32 = svoClause.ruleVerbParameter[0];
					if (paraString_32.ToUpper().Equals("SET")) {
						ruleResultObj = DoIntersection(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.COUNT_ELEMENT) {
					String paraString_33 = svoClause.ruleVerbParameter[0];
					if (paraString_33.ToUpper().Equals("SET")) {
						ruleResultObj = CountElement(
								(List<Object>) ruleSubjectObj, ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.COUNT_OVERLAP) {
					String paraString_34 = svoClause.ruleVerbParameter[0];
					if (paraString_34.ToUpper().Equals("SET")) {
						ruleResultObj = CountOverlap(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.COUNT) {
					String paraString_35 = svoClause.ruleVerbParameter[0];
					if (paraString_35.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleSubjectObj).Count;
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.COUNT_MAX_SAME) {
					String paraString_36 = svoClause.ruleVerbParameter[0];
					if (paraString_36.ToUpper().Equals("SET")) {
						ruleResultObj = CountMaxSame((List<Object>) ruleSubjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.DISTINCT) {
					String paraString_37 = svoClause.ruleVerbParameter[0];
					if (paraString_37.ToUpper().Equals("SET")) {
						ruleResultObj = DoDistinct((List<Object>) ruleSubjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.DISTINCT_COUNT) {
					String paraString_38 = svoClause.ruleVerbParameter[0];
					if (paraString_38.ToUpper().Equals("SET")) {
						ruleResultObj = DoDistinct_Count((List<Object>) ruleSubjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.SELECT) {
					String paraString_39 = svoClause.ruleVerbParameter[0];
					if (paraString_39.ToUpper().Equals("SET")) {
						paraString_39 = svoClause.ruleVerbParameter[1];
						if (paraString_39.ToUpper().Equals("ME")) {
							ruleResultObj = DoSelectMe((List<Object>) ruleSubjectObj);
						} else if (paraString_39.ToUpper().Equals("FIELD")) {
							ruleResultObj = DoSelectField(
									(List<Object>) ruleSubjectObj,
									(List<Object>) ruleObjectObj);
						} else if (paraString_39.ToUpper().Equals("METHOD")) {
							ruleResultObj = DoSelectMethod(
									(List<Object>) ruleSubjectObj,
									(List<Object>) ruleObjectObj);
						}
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.SELECT_WHERE) {
					String paraString_40 = svoClause.ruleVerbParameter[0];
					if (paraString_40.ToUpper().Equals("SET")) {
						paraString_40 = svoClause.ruleVerbParameter[1];
						List<String> ps = new List<String>();
						ps.AddRange(svoClause.ruleVerbParameter);
						ILOG.J2CsMapping.Collections.Collections.RemoveAt(ps,1);
						ILOG.J2CsMapping.Collections.Collections.RemoveAt(ps,0);
						if (paraString_40.ToUpper().Equals("ME")) {
							ruleResultObj = DoSelectMeWhere(
									(List<Object>) ruleSubjectObj, ps);
						} else if (paraString_40.ToUpper().Equals("FIELD")) {
							ruleResultObj = DoSelectFieldWhere(
									(List<Object>) ruleSubjectObj,
									(List<Object>) ruleObjectObj, ps);
						} else if (paraString_40.ToUpper().Equals("METHOD")) {
							ruleResultObj = DoSelectMethodWhere(
									(List<Object>) ruleSubjectObj,
									(List<Object>) ruleObjectObj, ps);
						}
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
		}
	
		/* @SuppressWarnings("unchecked")*/
		private void ExplainRuleSVOVerbEachMode(SVOClause svoClause,
				Object parameterObject, Object[] methodParameters) {
			try {
				if (svoClause.ruleVerb == RuleEnum.RuleVerbs.EQUALS) {
					String typeString = svoClause.ruleVerbParameter[0];
					if (typeString.ToUpper().Equals("STRING")) {
						List<Object> ruleSubjectObjList = (List<Object>) ruleSubjectObj;
						for (int i = 0; i < ruleSubjectObjList.Count; i++) {
							ruleResultObj = (bool)(((Boolean)ruleResultObj))
									& ruleSubjectObjList[i].ToString()
											.Equals(ruleObjectObj.ToString());
						}
					} else if (typeString.ToUpper().Equals("STRINGUPPER")) {
						List<Object> ruleSubjectObjList_0 = (List<Object>) ruleSubjectObj;
						for (int i_1 = 0; i_1 < ruleSubjectObjList_0.Count; i_1++) {
							ruleResultObj = (bool)(((Boolean)ruleResultObj))
									& ruleSubjectObjList_0[i_1]
											.ToString()
											.ToUpper()
											.Equals(ruleObjectObj.ToString()
													.ToUpper());
						}
					} else if (typeString.ToUpper().Equals("STRINGLOWER")) {
						List<Object> ruleSubjectObjList_2 = (List<Object>) ruleSubjectObj;
						for (int i_3 = 0; i_3 < ruleSubjectObjList_2.Count; i_3++) {
							ruleResultObj = (bool)(((Boolean)ruleResultObj))
									& ruleSubjectObjList_2[i_3]
											.ToString()
											.ToLower()
											.Equals(ruleObjectObj.ToString()
													.ToLower());
						}
					} else if (typeString.ToUpper().Equals("DOUBLE")) {
						List<Object> ruleSubjectObjList_4 = (List<Object>) ruleSubjectObj;
						for (int i_5 = 0; i_5 < ruleSubjectObjList_4.Count; i_5++) {
							ruleResultObj = (bool)(((Boolean)ruleResultObj))
									& ((Double) (ruleSubjectObjList_4[i_5])) == ((Double) (ruleObjectObj));
						}
					} else if (typeString.ToUpper().Equals("BOOLEAN")) {
						List<Object> ruleSubjectObjList_6 = (List<Object>) ruleSubjectObj;
						for (int i_7 = 0; i_7 < ruleSubjectObjList_6.Count; i_7++) {
							ruleResultObj = (bool)(((Boolean)ruleResultObj))
									& ((Boolean) (ruleSubjectObjList_6[i_7])) == ((Boolean) (ruleObjectObj));
						}
					} else {
						List<Object> ruleSubjectObjList_8 = (List<Object>) ruleSubjectObj;
						for (int i_9 = 0; i_9 < ruleSubjectObjList_8.Count; i_9++) {
							ruleResultObj = (bool)(((Boolean)ruleResultObj))
									& ruleSubjectObjList_8[i_9].Equals(
											ruleObjectObj);
						}
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.LARGER_THAN) {
					String typeString_10 = svoClause.ruleVerbParameter[0];
					if (typeString_10.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = (Double) (ruleSubjectObj) > (Double) (ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.LESS_THAN) {
					String typeString_11 = svoClause.ruleVerbParameter[0];
					if (typeString_11.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = (Double) (ruleSubjectObj) < (Double) (ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.NOT_LESS_THAN) {
					String typeString_12 = svoClause.ruleVerbParameter[0];
					if (typeString_12.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = (Double) (ruleSubjectObj) >= (Double) (ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.NOT_LARGER_THAN) {
					String typeString_13 = svoClause.ruleVerbParameter[0];
					if (typeString_13.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = (Double) (ruleSubjectObj) <= (Double) (ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.NOT_EQUALS) {
					String typeString_14 = svoClause.ruleVerbParameter[0];
					if (typeString_14.ToUpper().Equals("STRING")) {
						ruleResultObj = (ruleSubjectObj.ToString()
								.Equals(ruleObjectObj.ToString()));
					} else if (typeString_14.ToUpper().Equals("STRINGUPPER")) {
						ruleResultObj = (ruleSubjectObj.ToString().ToUpper()
								.Equals(ruleObjectObj.ToString().ToUpper()));
					} else if (typeString_14.ToUpper().Equals("STRINGLOWER")) {
						ruleResultObj = (ruleSubjectObj.ToString().ToLower()
								.Equals(ruleObjectObj.ToString().ToLower()));
					} else if (typeString_14.ToUpper().Equals("DOUBLE")) {
						ruleResultObj = !((Double) (ruleSubjectObj))
								.Equals((Double) (ruleObjectObj));
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.EXPRESSION_VALUE) {
					ruleResultObj = (Double) ((RuleExpressionExplainer) ruleSubjectObj)
							.GetExpressionValue((List<ExpressionVariable>) ruleObjectObj);
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.SET) {
					String paraString = svoClause.ruleVerbParameter[0];
					if (paraString.ToUpper().Equals("SELF")) {
						ruleResultObj = ruleObjectObj;
					} else if (paraString.ToUpper().Equals("FIELD")) {
						String fieldString = svoClause.ruleVerbParameter[1];
						ruleResultObj = ruleSubjectObj;
						Type c = ruleSubjectObj.GetType();
						FieldInfo f = c.GetField(fieldString);
						f.SetValue(ruleResultObj, ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.CALL) {
					String paraString_15 = svoClause.ruleVerbParameter[0];
					if (paraString_15.ToUpper().Equals("METHOD_VOID")) {
						String methodString = svoClause.ruleVerbParameter[1];
						Type c_16 = ruleSubjectObj.GetType();
						MethodInfo m = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c_16,methodString);
						ruleResultObj = ILOG.J2CsMapping.Reflect.Helper.Invoke(m,ruleSubjectObj,new Object[0]);
					} else if (paraString_15.ToUpper().Equals("METHOD_OBJ")) {
						String methodString_17 = svoClause.ruleVerbParameter[1];
						Type c_18 = ruleSubjectObj.GetType();
						MethodInfo m_19 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c_18,methodString_17);
						ruleResultObj = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_19,ruleSubjectObj,new Object[] { ruleObjectObj });
					} else if (paraString_15.ToUpper().Equals("METHOD_PARA_OBJ")) {
						String methodString_20 = svoClause.ruleVerbParameter[1];
						Type c_21 = ruleSubjectObj.GetType();
						MethodInfo m_22 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c_21,methodString_20);
						ruleResultObj = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_22,ruleSubjectObj,new Object[] { parameterObject });
					} else if (paraString_15.ToUpper()
							.Equals("METHOD_PARA_METHOD")) {
						String methodString_23 = svoClause.ruleVerbParameter[1];
						Type c_24 = ruleSubjectObj.GetType();
						MethodInfo m_25 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c_24,methodString_23);
						ruleResultObj = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_25,ruleSubjectObj,methodParameters);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.AND) {
					String paraString_26 = svoClause.ruleVerbParameter[0];
					if (paraString_26.ToUpper().Equals("LOGICAL")) {
						ruleResultObj = (Boolean) ruleSubjectObj
								& (Boolean) ruleObjectObj;
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.OR) {
					String paraString_27 = svoClause.ruleVerbParameter[0];
					if (paraString_27.ToUpper().Equals("LOGICAL")) {
						ruleResultObj = (Boolean) ruleSubjectObj
								| (Boolean) ruleObjectObj;
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.NOT) {
					String paraString_28 = svoClause.ruleVerbParameter[0];
					if (paraString_28.ToUpper().Equals("LOGICAL")) {
						ruleResultObj = !(bool)(((Boolean)ruleSubjectObj));
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.EARLY_THAN) {
					String paraString_29 = svoClause.ruleVerbParameter[0];
					if (paraString_29.ToUpper().Equals("TIME")) {
						ruleResultObj = ILOG.J2CsMapping.Util.DateUtil.Before(((DateTime) ruleSubjectObj),(DateTime) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.LATER_THAN) {
					String paraString_30 = svoClause.ruleVerbParameter[0];
					if (paraString_30.ToUpper().Equals("TIME")) {
						ruleResultObj = ILOG.J2CsMapping.Util.DateUtil.After(((DateTime) ruleSubjectObj),(DateTime) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.BETWEEN) {
					String paraString_31 = svoClause.ruleVerbParameter[0];
					if (paraString_31.ToUpper().Equals("TIME")) {
						SqlDateTime[] timeRange = (SqlDateTime[]) ruleObjectObj;
						ruleResultObj = ILOG.J2CsMapping.Util.DateUtil.After(((DateTime) ruleSubjectObj),timeRange[0])
								& ILOG.J2CsMapping.Util.DateUtil.Before(((DateTime) ruleSubjectObj),timeRange[1]);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.BELONG) {
					String paraString_32 = svoClause.ruleVerbParameter[0];
					if (paraString_32.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleObjectObj)
								.Contains(ruleSubjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.HAVING) {
					String paraString_33 = svoClause.ruleVerbParameter[0];
					if (paraString_33.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleSubjectObj)
								.Contains(ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.INSIDE) {
					String paraString_34 = svoClause.ruleVerbParameter[0];
					if (paraString_34.ToUpper().Equals("SET")) {
						ruleResultObj = IsInside(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.OUTSIDE) {
					String paraString_35 = svoClause.ruleVerbParameter[0];
					if (paraString_35.ToUpper().Equals("SET")) {
						ruleResultObj = IsOutside(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.OVERLAP) {
					String paraString_36 = svoClause.ruleVerbParameter[0];
					if (paraString_36.ToUpper().Equals("SET")) {
						ruleResultObj = IsOverlap(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.APPEND) {
					String paraString_37 = svoClause.ruleVerbParameter[0];
					if (paraString_37.ToUpper().Equals("SET")) {
						ruleResultObj = ILOG.J2CsMapping.Collections.Collections.Add(((List<Object>) ruleSubjectObj),ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.DELETE) {
					String paraString_38 = svoClause.ruleVerbParameter[0];
					if (paraString_38.ToUpper().Equals("SET")) {
						ruleResultObj = ILOG.J2CsMapping.Collections.Collections.Remove(((List<Object>) ruleSubjectObj),ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.MERGE) {
					String paraString_39 = svoClause.ruleVerbParameter[0];
					if (paraString_39.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleSubjectObj)
								.AddRange((List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.EXCLUDE) {
					String paraString_40 = svoClause.ruleVerbParameter[0];
					if (paraString_40.ToUpper().Equals("SET")) {
						ruleResultObj = ILOG.J2CsMapping.Collections.Collections.RemoveAll(((List<Object>) ruleSubjectObj),(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.UNION) {
					String paraString_41 = svoClause.ruleVerbParameter[0];
					if (paraString_41.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleSubjectObj)
								.AddRange((List<Object>) ruleObjectObj);
						ruleResultObj = DoDistinct((List<Object>) ruleResultObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.INTERSECTION) {
					String paraString_42 = svoClause.ruleVerbParameter[0];
					if (paraString_42.ToUpper().Equals("SET")) {
						ruleResultObj = DoIntersection(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.COUNT_ELEMENT) {
					String paraString_43 = svoClause.ruleVerbParameter[0];
					if (paraString_43.ToUpper().Equals("SET")) {
						ruleResultObj = CountElement(
								(List<Object>) ruleSubjectObj, ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.COUNT_OVERLAP) {
					String paraString_44 = svoClause.ruleVerbParameter[0];
					if (paraString_44.ToUpper().Equals("SET")) {
						ruleResultObj = CountOverlap(
								(List<Object>) ruleSubjectObj,
								(List<Object>) ruleObjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.COUNT) {
					String paraString_45 = svoClause.ruleVerbParameter[0];
					if (paraString_45.ToUpper().Equals("SET")) {
						ruleResultObj = ((List<Object>) ruleSubjectObj).Count;
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.COUNT_MAX_SAME) {
					String paraString_46 = svoClause.ruleVerbParameter[0];
					if (paraString_46.ToUpper().Equals("SET")) {
						ruleResultObj = CountMaxSame((List<Object>) ruleSubjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.DISTINCT) {
					String paraString_47 = svoClause.ruleVerbParameter[0];
					if (paraString_47.ToUpper().Equals("SET")) {
						ruleResultObj = DoDistinct((List<Object>) ruleSubjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.DISTINCT_COUNT) {
					String paraString_48 = svoClause.ruleVerbParameter[0];
					if (paraString_48.ToUpper().Equals("SET")) {
						ruleResultObj = DoDistinct_Count((List<Object>) ruleSubjectObj);
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.SELECT) {
					String paraString_49 = svoClause.ruleVerbParameter[0];
					if (paraString_49.ToUpper().Equals("SET")) {
						paraString_49 = svoClause.ruleVerbParameter[1];
						if (paraString_49.ToUpper().Equals("ME")) {
							ruleResultObj = DoSelectMe((List<Object>) ruleSubjectObj);
						} else if (paraString_49.ToUpper().Equals("FIELD")) {
							ruleResultObj = DoSelectField(
									(List<Object>) ruleSubjectObj,
									(List<Object>) ruleObjectObj);
						} else if (paraString_49.ToUpper().Equals("METHOD")) {
							ruleResultObj = DoSelectMethod(
									(List<Object>) ruleSubjectObj,
									(List<Object>) ruleObjectObj);
						}
					}
				} else if (svoClause.ruleVerb == RuleEnum.RuleVerbs.SELECT_WHERE) {
					String paraString_50 = svoClause.ruleVerbParameter[0];
					if (paraString_50.ToUpper().Equals("SET")) {
						paraString_50 = svoClause.ruleVerbParameter[1];
						List<String> ps = new List<String>();
						ps.AddRange(svoClause.ruleVerbParameter);
						ILOG.J2CsMapping.Collections.Collections.RemoveAt(ps,1);
						ILOG.J2CsMapping.Collections.Collections.RemoveAt(ps,0);
						if (paraString_50.ToUpper().Equals("ME")) {
							ruleResultObj = DoSelectMeWhere(
									(List<Object>) ruleSubjectObj, ps);
						} else if (paraString_50.ToUpper().Equals("FIELD")) {
							ruleResultObj = DoSelectFieldWhere(
									(List<Object>) ruleSubjectObj,
									(List<Object>) ruleObjectObj, ps);
						} else if (paraString_50.ToUpper().Equals("METHOD")) {
							ruleResultObj = DoSelectMethodWhere(
									(List<Object>) ruleSubjectObj,
									(List<Object>) ruleObjectObj, ps);
						}
					}
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
		}
	
		private void ExplainRuleSVOVerb(SVOClause svoClause,
				Object parameterObject, Object[] methodParameters) {
			try {
				if (svoClause.ruleMode.Equals(RuleEnum.RuleModes.WHOLE)) {
					ExplainRuleSVOVerbWholeMode(svoClause, parameterObject,
							methodParameters);
				} else if (svoClause.ruleMode.Equals(RuleEnum.RuleModes.EACH)) {
					ExplainRuleSVOVerbEachMode(svoClause, parameterObject,
							methodParameters);
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
		}
	
		private List<Object> DoSelectMe(List<Object> s) {
			List<Object> result = new List<Object>();
			for (int i = 0; i < s.Count; i++) {
				ILOG.J2CsMapping.Collections.Collections.Add(result,s[i]);
			}
			return result;
		}
	
		private List<Object> DoSelectMeWhere(List<Object> s,
				List<String> ps) {
			List<Object> result = new List<Object>();
			for (int i = 0; i < s.Count; i++) {
				String className = ps[0];
				Object parameterObject = s[i];
				Object currResult = null;
				for (int j = 1; j < ps.Count; j += 3) {
					String methodName = ps[j];
					Object[] methodParameters = new Object[1];
					String paraClassName = ps[j + 1];
					String paraValueStr = ps[j + 2];
					String[] methodParaClassName = new String[1];
					try {
						if (paraClassName.ToLower().Equals("null")) {
							methodParameters = null;
							methodParaClassName = null;
						} else {
							Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName);
							methodParameters[0] = c.Cast(paraValueStr);
							methodParaClassName[0] = paraClassName;
						}
					} catch (TypeLoadException e) {
						// TODO Auto-generated catch block
						Console.Error.WriteLine(e.StackTrace);
					}
					currResult = RunParameterClassMethod(className, methodName,
							parameterObject, methodParameters, methodParaClassName);
					className = currResult.GetType().FullName;
					parameterObject = currResult;
				}
				if ((bool)(((Boolean)currResult)) == true) {
					ILOG.J2CsMapping.Collections.Collections.Add(result,s[i]);
				}
			}
			return result;
		}
	
		private List<Object> DoSelectField(List<Object> s,
				List<Object> field) {
			List<Object> result = new List<Object>();
			for (int i = 0; i < s.Count; i++) {
				String className = field[0].ToString();
				String fieldName = field[1].ToString();
				ILOG.J2CsMapping.Collections.Collections.Add(result,GetParameterClassFieldValue(className, fieldName,
									(Object) s[i]));
			}
			return result;
		}
	
		private List<Object> DoSelectFieldWhere(List<Object> s,
				List<Object> field, List<String> ps) {
			List<Object> result = new List<Object>();
			for (int i = 0; i < s.Count; i++) {
				String className = ps[0];
				Object parameterObject = s[i];
				Object currResult = null;
				for (int j = 1; j < ps.Count; j += 3) {
					String methodName = ps[j];
					Object[] methodParameters = new Object[1];
					String paraClassName = ps[j + 1];
					String paraValueStr = ps[j + 2];
					String[] methodParaClassName = new String[1];
					try {
						if (paraClassName.ToLower().Equals("null")) {
							methodParameters = null;
							methodParaClassName = null;
						} else {
							Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName);
							methodParameters[0] = c.Cast(paraValueStr);
							methodParaClassName[0] = paraClassName;
						}
					} catch (TypeLoadException e) {
						// TODO Auto-generated catch block
						Console.Error.WriteLine(e.StackTrace);
					}
					currResult = RunParameterClassMethod(className, methodName,
							parameterObject, methodParameters, methodParaClassName);
					className = currResult.GetType().FullName;
					parameterObject = currResult;
				}
				if ((bool)(((Boolean)currResult)) == true) {
					className = field[0].ToString();
					String fieldName = field[1].ToString();
					ILOG.J2CsMapping.Collections.Collections.Add(result,GetParameterClassFieldValue(className, fieldName,
											(Object) s[i]));
				}
			}
			return result;
		}
	
		private List<Object> DoSelectMethod(List<Object> s,
				List<Object> field) {
			List<Object> result = new List<Object>();
			for (int i = 0; i < s.Count; i++) {
				String className = field[0].ToString();
				Object parameterObject = s[i];
				Object currResult = null;
				for (int j = 1; j < field.Count; j += 3) {
					String methodName = field[j].ToString();
					Object[] methodParameters = new Object[1];
					String paraClassName = field[j + 1].ToString();
					String paraValueStr = field[j + 2].ToString();
					String[] methodParaClassName = new String[1];
					try {
						if (paraClassName.ToLower().Equals("null")) {
							methodParameters = null;
							methodParaClassName = null;
						} else {
							Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName);
							methodParameters[0] = c.Cast(paraValueStr);
							methodParaClassName[0] = paraClassName;
						}
					} catch (TypeLoadException e) {
						// TODO Auto-generated catch block
						Console.Error.WriteLine(e.StackTrace);
					}
					currResult = RunParameterClassMethod(className, methodName,
							parameterObject, methodParameters, methodParaClassName);
					className = currResult.GetType().FullName;
					parameterObject = currResult;
				}
				ILOG.J2CsMapping.Collections.Collections.Add(result,currResult);
			}
			return result;
		}
	
		private List<Object> DoSelectMethodWhere(List<Object> s,
				List<Object> field, List<String> ps) {
			List<Object> result = new List<Object>();
			for (int i = 0; i < s.Count; i++) {
				String className = ps[0];
				Object parameterObject = s[i];
				Object currResult = null;
				for (int j = 1; j < ps.Count; j += 3) {
					String methodName = ps[j];
					Object[] methodParameters = new Object[1];
					String paraClassName = ps[j + 1];
					String paraValueStr = ps[j + 2];
					String[] methodParaClassName = new String[1];
					try {
						if (paraClassName.ToLower().Equals("null")) {
							methodParameters = null;
							methodParaClassName = null;
						} else {
							Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName);
							methodParameters[0] = c.Cast(paraValueStr);
							methodParaClassName[0] = paraClassName;
						}
					} catch (TypeLoadException e) {
						// TODO Auto-generated catch block
						Console.Error.WriteLine(e.StackTrace);
					}
					currResult = RunParameterClassMethod(className, methodName,
							parameterObject, methodParameters, methodParaClassName);
					className = currResult.GetType().FullName;
					parameterObject = currResult;
				}
				if ((bool)(((Boolean)currResult)) == true) {
					className = field[0].ToString();
					for (int j_0 = 1; j_0 < field.Count; j_0 += 3) {
						String methodName_1 = field[j_0].ToString();
						Object[] methodParameters_2 = new Object[1];
						String paraClassName_3 = field[j_0 + 1].ToString();
						String paraValueStr_4 = field[j_0 + 2].ToString();
						String[] methodParaClassName_5 = new String[1];
						try {
							if (paraClassName_3.ToLower().Equals("null")) {
								methodParameters_2 = null;
								methodParaClassName_5 = null;
							} else {
								Type c_6 = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(paraClassName_3);
								methodParameters_2[0] = c_6.Cast(paraValueStr_4);
								methodParaClassName_5[0] = paraClassName_3;
							}
						} catch (TypeLoadException e_7) {
							// TODO Auto-generated catch block
							Console.Error.WriteLine(e_7.StackTrace);
						}
						currResult = RunParameterClassMethod(className, methodName_1,
								parameterObject, methodParameters_2,
								methodParaClassName_5);
						className = currResult.GetType().FullName;
						parameterObject = currResult;
					}
					ILOG.J2CsMapping.Collections.Collections.Add(result,currResult);
				}
			}
			return result;
		}
	
		private bool IsInside(List<Object> s1, List<Object> s2) {
			bool result = true;
			for (int i = 0; i < s1.Count; i++) {
				if (!s2.Contains(s1[i])) {
					result = false;
					break;
				}
			}
			return result;
		}
	
		private bool IsOutside(List<Object> s1, List<Object> s2) {
			bool result = true;
			for (int i = 0; i < s1.Count; i++) {
				if (s2.Contains(s1[i])) {
					result = false;
					break;
				}
			}
			return result;
		}
	
		private bool IsOverlap(List<Object> s1, List<Object> s2) {
			bool result = false;
			for (int i = 0; i < s1.Count; i++) {
				if (s2.Contains(s1[i])) {
					result = true;
					break;
				}
			}
			return result;
		}
	
		private List<Object> DoIntersection(List<Object> s1,
				List<Object> s2) {
			List<Object> result = new List<Object>();
			for (int i = 0; i < s1.Count; i++) {
				Object ci = s1[i];
				if (s2.Contains(ci) & !result.Contains(ci)) {
					ILOG.J2CsMapping.Collections.Collections.Add(result,ci);
				}
			}
			return result;
		}
	
		private List<Object> DoDistinct(List<Object> s) {
			List<Object> result = new List<Object>();
			for (int i = 0; i < s.Count; i++) {
				Object ci = s[i];
				if (!result.Contains(ci)) {
					ILOG.J2CsMapping.Collections.Collections.Add(result,ci);
				}
			}
			return result;
		}
	
		private List<Object> DoDistinct_Count(List<Object> s) {
			List<Object> result = new List<Object>();
			List<Object> resultContent = new List<Object>();
			List<Int32> resultCount = new List<Int32>();
			for (int i = 0; i < s.Count; i++) {
				Object ci = s[i];
				if (!resultContent.Contains(ci)) {
					ILOG.J2CsMapping.Collections.Collections.Add(resultContent,ci);
					ILOG.J2CsMapping.Collections.Collections.Add(resultCount,1);
				} else {
					int cIndex = resultContent.IndexOf(ci);
					resultCount[cIndex]=(resultCount[cIndex]) + 1;
				}
			}
			for (int i_0 = 0; i_0 < resultContent.Count; i_0++) {
				Object[] currResult = new Object[] { resultContent[i_0],
						resultCount[i_0] };
				ILOG.J2CsMapping.Collections.Collections.Add(result,currResult);
			}
			return result;
		}
	
		private int CountElement(List<Object> sl, Object se) {
			int result = 0;
			for (int i = 0; i < sl.Count; i++) {
				Object slc = sl[i];
				if (slc.Equals(se)) {
					result++;
				}
			}
			return result;
		}
	
		private int CountOverlap(List<Object> s1, List<Object> s2) {
			int result = DoIntersection(s1, s2).Count;
			return result;
		}
	
		private int CountMaxSame(List<Object> s) {
			int result = 0;
			for (int i = 0; i < s.Count; i++) {
				int currCount = CountElement(s, s[i]);
				if (i == 0 | result < currCount) {
					result = currCount;
				}
			}
			return result;
		}
	
		private Object GetParameterClassFieldValue(String className,
				String fieldName, Object parameterObject) {
			Object result = null;
			try {
				String objectClassName = parameterObject.GetType().ToString();
				// if (objectClassName == className) {
				Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(className);
				FieldInfo f = c.GetField(fieldName);
				result = f.GetValue(parameterObject);
				// }
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
			return result;
		}
	
		private Object RunParameterClassMethod(String className, String methodName,
				Object parameterObject, Object[] methodParameters) {
			Object result = null;
			try {
				String objectClassName = parameterObject.GetType().ToString();
				// if (objectClassName == className) {
				Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(className);
				MethodInfo m = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c,methodName);
				result = ILOG.J2CsMapping.Reflect.Helper.Invoke(m,parameterObject,methodParameters);
				// }
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
			return result;
		}
	
		private Object RunParameterClassMethod(String className, String methodName,
				Object parameterObject, Object[] methodParameters,
				String[] methodParaClassName) {
			Object result = null;
			try {
				String objectClassName = parameterObject.GetType().ToString();
				// if (objectClassName == className) {
				Type c = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(className);
				if (methodParaClassName == null) {
					MethodInfo m = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c,methodName);
					result = ILOG.J2CsMapping.Reflect.Helper.Invoke(m,parameterObject,methodParameters);
				} else if (methodParaClassName.Length == 1) {
					Type pc1 = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(methodParaClassName[0]);
					MethodInfo m_0 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c,methodName,pc1);
					result = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_0,parameterObject,methodParameters);
				} else if (methodParaClassName.Length == 2) {
					Type pc1_1 = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(methodParaClassName[0]);
					Type pc2 = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(methodParaClassName[1]);
					MethodInfo m_2 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c,methodName,pc1_1,pc2);
					result = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_2,parameterObject,methodParameters);
				} else if (methodParaClassName.Length == 3) {
					Type pc1_3 = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(methodParaClassName[0]);
					Type pc2_4 = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(methodParaClassName[1]);
					Type pc3 = ILOG.J2CsMapping.Reflect.Helper.GetNativeType(methodParaClassName[2]);
					MethodInfo m_5 = ILOG.J2CsMapping.Reflect.Helper.GetMethod(c,methodName,pc1_3,pc2_4,pc3);
					result = ILOG.J2CsMapping.Reflect.Helper.Invoke(m_5,parameterObject,methodParameters);
				}
				// }
			} catch (Exception e) {
				// TODO Auto-generated catch block
				Console.Error.WriteLine(e.StackTrace);
			}
			return result;
		}
	
		public Object GetRuleSubjectObj() {
			return ruleSubjectObj;
		}
	
		public Object GetRuleObjectObj() {
			return ruleObjectObj;
		}
	
		public void SetRuleSubjectObj(Object ruleSubjectObj_0) {
			this.ruleSubjectObj = ruleSubjectObj_0;
		}
	
		public void SetRuleObjectObj(Object ruleObjectObj_0) {
			this.ruleObjectObj = ruleObjectObj_0;
		}
	
		public Object GetRuleResultObj() {
			return ruleResultObj;
		}
	
		public void SetRuleResultObj(Object ruleResult) {
			this.ruleResultObj = ruleResult;
		}
	
		public String GetRuleSVOInstanceFile() {
			return RuleSVOInstanceFile;
		}
	
		public void SetRuleSVOInstanceFile(String ruleSVOInstanceFile) {
			RuleSVOInstanceFile = ruleSVOInstanceFile;
		}
	
		public Object GetRuleVerbObj() {
			return ruleVerbObj;
		}
	
		public void SetRuleVerbObj(Object ruleVerbObj_0) {
			this.ruleVerbObj = ruleVerbObj_0;
		}
	
		public List<SVOClause> GetSvoClauseList() {
			return svoClauseList;
		}
	
		public void SetSvoClauseList(List<SVOClause> svoClauseList_0) {
			this.svoClauseList = svoClauseList_0;
		}
	}
}
